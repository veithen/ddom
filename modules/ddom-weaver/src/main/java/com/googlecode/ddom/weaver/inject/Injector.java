/*
 * Copyright 2009-2010 Andreas Veithen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.googlecode.ddom.weaver.inject;

import org.objectweb.asm.MethodVisitor;

/**
 * Generates the code to inject a value into a given field.
 * 
 * @author Andreas Veithen
 */
public interface Injector {
    /**
     * Generate the code for the factory method. The factory method is responsible for returning a
     * value for the injectable field. The plugin itself takes care of generating the necessary code
     * to invoke the factory method for each injectable field found in the class and assign the
     * return values to these fields. The implementation must start by invoking
     * {@link MethodVisitor#visitCode()} and end with invoking {@link MethodVisitor#visitEnd()} on
     * the provided method visitor. The call to
     * {@link org.objectweb.asm.ClassVisitor#visitMethod(int, String, String, String, String[])} is
     * generated by the plugin before calling this method.
     * 
     * @param mv
     *            the method visitor that the implementation must use to generate the code
     */
    void generateFactoryMethodCode(MethodVisitor mv);
}
